 
=== pytest.ini === 
# Mail_Client_Test/pytest.ini
[pytest]
python_paths = ./src
python_files = test_*.py *_tests.py
testpaths = C:/Users/Chuck/Desktop/CR_AI_Engineering/Projekte/Mail_Client_Test/tests
addopts = -v
log_level = DEBUG
asyncio_mode = strict
capture = no 
=== tests/test_exchange.py === 
# tests/test_exchange.py
import pytest
import pandas as pd
import asyncio
from src.exchange import fetch_klines, initialize_exchange

@pytest.mark.asyncio
async def test_fetch_klines():
    exchange = await initialize_exchange()
    try:
        df = await fetch_klines("BTC/EUR", exchange)
        assert isinstance(df, pd.DataFrame)
        assert not df.empty
        assert 'timestamp' in df.columns
        assert 'symbol' in df.columns
        assert df['symbol'].iloc[0] == "BTC/EUR"
    finally:
        await exchange.close() 
=== tests/test_portfolio.py === 
# tests/test_portfolio.py
import pytest
from src.state import portfolio
from src.portfolio import manage_portfolio
from src.price_monitor import PriceMonitorManager

def test_portfolio_initialization():
    assert portfolio['cash'] == 10000
    assert portfolio['assets'] == {} 
=== tests/test_utils.py === 
# tests/test_utils.py
import pytest
import pandas as pd
from src.utils import calculate_ema

def test_calculate_ema():
    data = pd.Series([100, 101, 102, 103, 104])
    ema = calculate_ema(data, 3)
    assert isinstance(ema, pd.Series)
    assert len(ema) == len(data)
    assert all(ema.notna())